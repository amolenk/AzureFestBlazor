@using AzureFest.Web.Services
@using System.ComponentModel.DataAnnotations
@inject IRegistrationService RegistrationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageScript Src="./Components/RegistrationForm.razor.js" />

<div class="registration-form">

    <h5 class="text-center mb-4">Register for Azure Fest</h5>

    @if (string.IsNullOrWhiteSpace(Status))
    {
        @if (_hasAvailableTickets)
        {
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @_errorMessage
                </div>
            }

            <EditForm FormName="RegistrationForm" Model="_registrationModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                
                <div class="mb-3">
                    <label for="email" class="form-label">Email address *</label>
                    <InputText id="email" class="form-control" @bind-Value="_registrationModel.Email" />
                    <ValidationMessage For="@(() => _registrationModel.Email)" />
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="firstName" class="form-label">First name *</label>
                        <InputText id="firstName" class="form-control" @bind-Value="_registrationModel.FirstName" />
                        <ValidationMessage For="@(() => _registrationModel.FirstName)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="lastName" class="form-label">Last name *</label>
                        <InputText id="lastName" class="form-control" @bind-Value="_registrationModel.LastName" />
                        <ValidationMessage For="@(() => _registrationModel.LastName)" />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Are you employed or self-employed? *</label>
                    <InputSelect class="form-select" @bind-Value="_registrationModel.EmploymentStatus">
                        <option value="">-- Please select --</option>
                        <option value="Employed">Employed</option>
                        <option value="SelfEmployed">Self-employed</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _registrationModel.EmploymentStatus)" />
                </div>
                
                <div class="mb-3">
                    <label for="companyName" class="form-label">Company name (optional)</label>
                    <InputText id="companyName" class="form-control" @bind-Value="_registrationModel.CompanyName" />
                </div>
                
                <div class="text-center">
                    <button type="submit" class="btn btn-primary">Register Now</button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                We're sorry, but all tickets for Azure Fest are currently sold out. Please check back later or follow us on social media for updates.
            </div>
        }
    }
    else if (Status == "confirm")
    {
        <div class="alert alert-warning" role="alert">
            Please check your email and click the confirmation link to complete your registration.
        </div>
    }

</div>

@code {

    [SupplyParameterFromQuery]
    public string? Status { get; set; }

    [SupplyParameterFromForm]
    public RegistrationModel _registrationModel { get; set; } = new();

    private string _errorMessage = string.Empty;
    private bool _hasAvailableTickets = true;
    
    protected override async Task OnInitializedAsync()
    {
        _hasAvailableTickets = await RegistrationService.HasAvailableTicketsAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _errorMessage = string.Empty;

            var result = await RegistrationService.RegisterAsync(
                _registrationModel.Email,
                _registrationModel.FirstName,
                _registrationModel.LastName,
                _registrationModel.EmploymentStatus,
                _registrationModel.CompanyName);

            if (result.Success)
            {
                NavigationManager.NavigateTo("/tickets?status=confirm");
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "An unknown error occurred.";
            }
        }
        catch (Exception ex) when (ex is not NavigationException)
        {
            _errorMessage = "An error occurred while processing your registration. Please try again.";
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please select your employment status")]
        public string EmploymentStatus { get; set; } = string.Empty;

        public string? CompanyName { get; set; }
    }
}
