@page "/qrscan"
@layout EmptyLayout
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card shadow-lg" style="max-width: 450px; width: 100%;">
        <div class="card-body text-center">
            @if (!_authorized)
            {
                <h3 class="card-title text-danger">Access Denied</h3>
                <p class="card-text">This page is not available.</p>
            }
            else
            {
                <h3 class="card-title mb-3">Badge Scanner</h3>
                <noscript>
                    <p>JavaScript is required to use the camera scanner.</p>
                </noscript>

                <div id="qr-reader" class="row mb-3 justify-content-center">
                    <div class="col-12">
                        <div id="reader" style="width:350px; max-width: 100%; margin: 0 auto;"></div>
                    </div>
                </div>

                @* <div id="hint" class="row justify-content-center"> *@
                @*     <div class="col-12"> *@
                @*         <span class="text-muted">Point the camera at the attendee's QR code.</span> *@
                @*     </div> *@
                @* </div> *@

                <!-- Inline result, mirrors your QRScanResult layout -->
                <div id="inline-result" class="mt-3 d-none">
                    <div id="result-failed" class="d-none">
                        <h3 class="card-title text-danger">Check-in Failed</h3>
                        <p id="result-error" class="card-text"></p>
                    </div>

                    <div id="result-success" class="d-none">
                        <h3 class="card-title text-success mb-3">Check-in Succeeded</h3>

                        <div class="row mb-2 justify-content-center">
                            <div class="col-5 text-end fw-bold">First Name:</div>
                            <div id="first-name" class="col-7 text-start"></div>
                        </div>
                        <div class="row mb-2 justify-content-center">
                            <div class="col-5 text-end fw-bold">Last Name:</div>
                            <div id="last-name" class="col-7 text-start"></div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col-5 text-end fw-bold">Registration Status:</div>
                            <div id="reg-status" class="col-7 text-start"></div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <button id="scan-another" class="btn btn-primary" type="button">Scan Another</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
<script>
    (function () {
        const secret = @(new MarkupString(JsonSerializer.Serialize(_secret ?? "")));
        if (!secret) { return; }

        // UI elements
        const inlineResult = document.getElementById("inline-result");
        const qrReader = document.getElementById("qr-reader");
        const failed = document.getElementById("result-failed");
        const success = document.getElementById("result-success");
        const errorText = document.getElementById("result-error");
        const firstNameEl = document.getElementById("first-name");
        const lastNameEl = document.getElementById("last-name");
        const statusEl = document.getElementById("reg-status");
        const scanAnotherBtn = document.getElementById("scan-another");

        let scanner = null;

        function show(el) { el.classList.remove("d-none"); }
        function hide(el) { el.classList.add("d-none"); }
        function esc(s) {
            return String(s ?? "")
                .replace(/&/g, "&amp;").replace(/</g, "&lt;")
                .replace(/>/g, "&gt;").replace(/"/g, "&quot;");
        }

        async function onScanSuccess(decodedText /*, decodedResult */) {
            // Pause scanning so we don't read multiple codes
            pauseScanner();

            // light haptic feedback on supported devices
            if (navigator.vibrate) navigator.vibrate(50);

            try {
                // POST the exact payload you previously passed via querystring
                const res = await fetch(`/api/qrscan/${decodedText}/${secret}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                });

                // show container
                hide(qrReader);
                show(inlineResult);

                if (!res.ok) {
                    const msg = await res.text();
                    hide(success); show(failed);
                    errorText.textContent = msg || `Server returned ${res.status}`;
                    return;
                }

                const data = await res.json();

                if (!data.success) {
                    hide(success); show(failed);
                    errorText.textContent = data.error || "Check-in failed.";
                } else {
                    hide(failed); show(success);
                    firstNameEl.textContent = data.firstName ?? "";
                    lastNameEl.textContent  = data.lastName  ?? "";
                    statusEl.textContent    = data.status    ?? "";
                }
            } catch (e) {
                hide(qrReader);
                show(inlineResult);
                hide(success); show(failed);
                errorText.textContent = String(e);
            }
        }

        function onScanFailure(_e) {
            // ignore frame decode errors
        }

        function pauseScanner() {
            try {
                if (scanner && typeof scanner.pause === "function") {
                    // true = pause camera along with decoding (keeps stream available to resume without re-prompt)
                    scanner.pause(true);
                }
            } catch { /* noop */ }
        }

        async function resumeScanner() {
            show(qrReader);
            hide(inlineResult);
            try {
                if (scanner && typeof scanner.resume === "function") {
                    await scanner.resume(); // reuse same camera stream => no iOS prompt
                    return;
                }
                // Fallback: re-render if resume isn't available
                await clearScanner();
                renderScanner();
            } catch {
                await clearScanner();
                renderScanner();
            }
        }

        async function clearScanner() {
            try {
                if (scanner && typeof scanner.clear === "function") {
                    await scanner.clear();
                }
            } catch { /* noop */ }
        }

        function renderScanner() {
            scanner = new Html5QrcodeScanner(
                "reader",
                { fps: 10, qrbox: { width: 250, height: 250 } },
                false
            );
            scanner.render(onScanSuccess, onScanFailure);
        }

        if (scanAnotherBtn) {
            scanAnotherBtn.addEventListener("click", resumeScanner);
        }

        renderScanner();

        // Clean-up
        window.addEventListener("beforeunload", () => { clearScanner(); });
    })();
</script>

@code {
    private string? _secret;
    private bool _authorized;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        _secret = query.TryGetValue("secret", out var s) ? s.ToString() : null;

        var requiredSecret = Configuration["QrScanSecret"];
        _authorized = !string.IsNullOrEmpty(_secret) && _secret == requiredSecret;
    }
}