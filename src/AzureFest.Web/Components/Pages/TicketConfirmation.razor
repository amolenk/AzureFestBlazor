@page "/tickets/confirm/{registrationId}/{signature}"
@using AzureFest.Web.Services
@inject IRegistrationService RegistrationService
@inject NavigationManager Navigation

<PageTitle>Confirm Registration | Azure Fest</PageTitle>

<HeaderSpacer />

<Section Id="confirmation" HeaderText="Registration Confirmation" Background="true" FadeUp="true">
    <div class="row justify-content-center">
        <div class="col-lg-6 text-center">
            @if (_isLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Confirming your registration...</p>
            }
            else if (_isConfirmed)
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Registration Confirmed!</h4>
                    <p>Your registration for Azure Fest has been successfully confirmed.</p>
                    <hr>
                    <p class="mb-0">A ticket with QR code has been sent to your email address. Please bring this QR code with you to the event.</p>
                </div>
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Confirmation Failed</h4>
                    <p>@_errorMessage</p>
                </div>
                <a href="/tickets" class="btn btn-primary mt-3">Register Again</a>
            }
        </div>
    </div>
</Section>

@code {
    [Parameter] public string RegistrationId { get; set; } = string.Empty;
    [Parameter] public string Signature { get; set; } = string.Empty;
    
    private bool _isLoading = true;
    private bool _isConfirmed = false;
    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(RegistrationId) || string.IsNullOrEmpty(Signature))
        {
            _errorMessage = "Invalid confirmation link.";
            _isLoading = false;
            return;
        }

        try
        {
            var result = await RegistrationService.ConfirmRegistrationAsync(RegistrationId, Signature);
            
            if (result.Success)
            {
                _isConfirmed = true;
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "An unknown error occurred.";
            }
        }
        catch (Exception)
        {
            _errorMessage = "An error occurred while confirming your registration. Please try again or contact support.";
        }
        finally
        {
            _isLoading = false;
        }
    }
}