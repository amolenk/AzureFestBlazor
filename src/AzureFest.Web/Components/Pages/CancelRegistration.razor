@page "/tickets/cancel/{registrationId}/{signature}"

@using AzureFest.Web.Services
@using System.ComponentModel.DataAnnotations

@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject ILogger<CancelRegistration> Logger
@inject HmacService HmacService

<PageTitle>Cancel Registration | Azure Fest</PageTitle>

<PageScript Src="./Components/Pages/CancelRegistration.razor.js" />

<HeaderSpacer />

<Section Id="cancellation" HeaderText="Cancel Registration" Background="true">
    <div class="row justify-content-center">
        <div class="col-lg-6 text-center">


            @if (string.IsNullOrWhiteSpace(Status) && string.IsNullOrWhiteSpace(_errorMessage) && registration is not null)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">⚠️ Cancel Registration</h5>
                        <p class="card-text">
                            Are you sure you want to cancel your registration for Azure Fest?
                        </p>
                        <div class="mt-3">
                            <p><strong>Name:</strong> @registration.FirstName @registration.LastName</p>
                            <p><strong>Email:</strong> @registration.Email</p>
                            @if (!string.IsNullOrEmpty(registration.CompanyName))
                            {
                                <p><strong>Company:</strong> @registration.CompanyName</p>
                            }
                        </div>
                        <div class="mt-4">

                            <EditForm FormName="CancellationForm" Model="Input" OnValidSubmit="HandleValidSubmit">
                                <button type="submit" class="btn btn-danger me-2">Yes, Cancel Registration</button>
                                <a href="/" class="btn btn-secondary">No, Keep Registration</a>
                            </EditForm>
 
                        </div>
                    </div>
                </div>
            }
            else if (Status == "success")
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Registration Cancelled</h4>
                    <p>Your registration for Azure Fest has been successfully cancelled.</p>
                    <hr>
                    <p class="mb-0">If you change your mind, you can register again on our <a href="/tickets">tickets page</a>.</p>
                </div>
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Cancellation Failed</h4>
                    <p>@_errorMessage</p>
                </div>
            }

        </div>
    </div>
</Section>

@code {
    
    private AzureFest.Models.Registration? registration;

    [Parameter]
    public string RegistrationId { get; set; } = string.Empty;

    [Parameter]
    public string Signature { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? Status { get; set; }

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(RegistrationId) 
            || string.IsNullOrEmpty(Signature)
            || !HmacService.ValidateSignature(RegistrationId, Signature))
        {
            _errorMessage = "Invalid cancellation link.";
            return;
        }

        try
        {
            // Get registration details first to show confirmation
            registration = await RegistrationService.GetRegistrationByIdAsync(RegistrationId);
            
            if (registration == null)
            {
                _errorMessage = "Registration not found or already cancelled.";
            }
        }
        catch (Exception)
        {
            _errorMessage = "An error occurred while loading your registration. Please try again or contact support.";
        }

        Input ??= new();
    }

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("Form submitted for cancellation of registration ID {RegistrationId}", RegistrationId);

        if (string.IsNullOrWhiteSpace(RegistrationId))
        {
            _errorMessage = "Invalid registration ID.";
            return;
        }

        try
        {
            var result = await RegistrationService.CancelRegistrationAsync(RegistrationId, Signature);
            
            if (result.Success)
            {
                NavigationManager.NavigateTo($"/tickets/cancel/{RegistrationId}/{Signature}?status=success");
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "An unknown error occurred.";
            }
        }
        catch (Exception ex) when (ex is not NavigationException)
        {
            _errorMessage = "An error occurred while cancelling your registration. Please try again or contact support.";
        }
    }

    private sealed class InputModel
    {
    }
}