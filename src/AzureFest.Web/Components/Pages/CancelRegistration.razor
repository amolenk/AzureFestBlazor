@page "/tickets/cancel/{registrationId}/{signature}"
@using AzureFest.Web.Services
@inject IRegistrationService RegistrationService
@inject NavigationManager Navigation

<PageTitle>Cancel Registration | Azure Fest</PageTitle>

<HeaderSpacer />

<Section Id="cancellation" HeaderText="Cancel Registration" Background="true" FadeUp="true">
    <div class="row justify-content-center">
        <div class="col-lg-6 text-center">
            @if (isLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading registration details...</p>
            }
            else if (registration != null && !showConfirmation)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title text-warning">⚠️ Cancel Registration</h5>
                        <p class="card-text">
                            Are you sure you want to cancel your registration for Azure Fest?
                        </p>
                        <div class="mt-3">
                            <p><strong>Name:</strong> @registration.FirstName @registration.LastName</p>
                            <p><strong>Email:</strong> @registration.Email</p>
                            @if (!string.IsNullOrEmpty(registration.CompanyName))
                            {
                                <p><strong>Company:</strong> @registration.CompanyName</p>
                            }
                        </div>
                        <div class="mt-4">
                            <button class="btn btn-danger me-2" @onclick="ConfirmCancellation" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Cancelling...</span>
                                }
                                else
                                {
                                    <span>Yes, Cancel Registration</span>
                                }
                            </button>
                            <a href="/" class="btn btn-secondary">No, Keep Registration</a>
                        </div>
                    </div>
                </div>
            }
            else if (isCancelled)
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Registration Cancelled</h4>
                    <p>Your registration for Azure Fest has been successfully cancelled.</p>
                    <hr>
                    <p class="mb-0">If you change your mind, you can register again on our tickets page.</p>
                </div>
                <div class="mt-3">
                    <a href="/tickets" class="btn btn-primary me-2">Register Again</a>
                    <a href="/" class="btn btn-secondary">Back to Home</a>
                </div>
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Cancellation Failed</h4>
                    <p>@errorMessage</p>
                </div>
                <a href="/tickets" class="btn btn-primary mt-3">Register Again</a>
            }
        </div>
    </div>
</Section>

@code {
    [Parameter] public string RegistrationId { get; set; } = string.Empty;
    [Parameter] public string Signature { get; set; } = string.Empty;
    
    private AzureFest.Models.Registration? registration;
    private bool isLoading = true;
    private bool showConfirmation = false;
    private bool isCancelled = false;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(RegistrationId) || string.IsNullOrEmpty(Signature))
        {
            errorMessage = "Invalid cancellation link.";
            isLoading = false;
            return;
        }

        try
        {
            // Get registration details first to show confirmation
            registration = await RegistrationService.GetRegistrationByIdAsync(RegistrationId);
            
            if (registration == null)
            {
                errorMessage = "Registration not found or already cancelled.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while loading your registration. Please try again or contact support.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ConfirmCancellation()
    {
        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var result = await RegistrationService.CancelRegistrationAsync(RegistrationId, Signature);
            
            if (result.Success)
            {
                isCancelled = true;
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "An unknown error occurred.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while cancelling your registration. Please try again or contact support.";
        }
        finally
        {
            isProcessing = false;
        }
    }
}